(
 ''
 '## Overview'
 ''
 'This package comes with functions and operators that allow you to interrogate the user, and make her...'
 ''
 '* answer simple questions like "Are you sure?" or "Really delete this file?" (`YesOrNo`)'
 '* select an item (or several items) from a list of items, or quit (`Select`)'
 '* pause and read a message before continuing (`Pause`)'
 '* enter a character vector in response to something like "Enter your name:" (`AskForNumber`)'
 '* enter a number in response to something like "How many copies? " (`AskForText`)'
 '                                                                 '
 'This is useful for interacting with the user in the session, something that user commands do'
 'pretty frequently.'
 ''
 'Note that although `AskForNumber` and `AskForText` are operators rather than functions this document'
 'will refer to them as functions except when they themselves are discussed.'
 ''
 '## Interrupting the functions'
 ''
 'When a user is asked for input due to a long-standing bug in Dyalog, one cannot interrupt with a weak '
 'or a strong interrupt . Answering the question or selecting an item and then trying to interrupt the '
 'code does not work well on modern machines since they are just too fast.'
 ''
 'That''s why all functions allow you to enter `∘∘∘`, which makes the functions run on a stop vector that '
 'is dynamically set for just this purpose.                                                                 '
 ''
 '## Automated responses'
 ''
 'Test cases quite often require certain decisions and choices to be made. In such cases the presence '
 'of a human in front of the screen is required. The automation feature is designed to allow such tests '
 'to run without a human.'
 ''
 'All functions can be integrated into tests so that no user is required to answer any questions, or'
 'select items. This is achieved by providing data on global variables that do not normally exist.'
 ''
 '#### Dynamically generated questions and captions'
 '    '
 'Sometimes you need to create a question (`YesOrNo`) or a caption (`Select`) dynamically like '
 '"Select action for file /foo/boo/this-will-change.txt"'
 ''
 'In such cases, for automation, specify only the leading part of the question or caption that won''t be '
 'generated dynamically. In the example specify just "Select action for file". In case no full match can '
 'be established `Select` or `YesAndNo` will check whether the _beginning_ of the caption/question matches '
 'the text given, so it would still find a match. '
 ''
 '### Using aliases'
 ''
 'Aliases were introduced with version 1.2. By default, an alias is represented by the `@` character.'
 'As of version 1.3.0 you can choose a different one by assigning it to the global variable `AliasChar` '
 'which is only required when you need to use "@" in your question or message.'
 ''
 'Anything up to and including the `@` will be taken as alias, meaning that this part will not be shown as '
 'question or message but can be used as a matching string, again including the (trailing) `@` character. '
 ''
 'Note that although aliases may seem like a perfect solution, they can also reduce readability. If you '
 'create a large number of answers in advance  at the start of your application this can become a bit confusing.'
 ''
 'There are two ways of avoiding this:'
 ''
 '1. Use a meaningful expression as an alias rather than, say, just `1@`'
 ''
 '2. You can add something _after_ the `@` glyph in `*_Answers`. This is ignored and can therefore be used'
 '   as a comment'
 ''
 '   It could be a hint or the name of the function that will ask the question etc.'
 '   '
 '### Cleaning up'
 ''
 'Of course there is nothing wrong with deleting the global variables yourself like this:'
 ''
 '```'
 '⎕EX ''CommTools.Select_Choices'''
 '    ⍝ ... etc'''
 '```'
 ''
 'However, you can also just call the `Cleanup` function which will do the job for you.'
 ''
 'Also, if `CommTools` is extended in the future, `Cleanup` may do more than that, so'
 'calling it is safer than doing the job yourself. '
 ''
 'The disadvantage of `Cleanup` is that it expunges _all_ global variables used for automation, and there '
 'may be scenarios where you do not want this. Then you have to delete what you don''t need any more yourself.'
 '   '
 '## The functions and operators'
 ''
 ''
 '### The function "YesOrNo"'
 ''
 'Imagine that you ask this question:'
 '                       '
 '```'
 'CommTools.YesOrNo ''Sure you want to delete this file?'''
 '```'
 ''
 'To answer this question automatically create a global variable `YesOrNo_Answers` as a matrix'
 'with two columns:'
 ''
 '| `[;1]` | Contains the question to be answered automatically.'
 '| `[;2]` | The answer to be given, usually either "y" or "no".'
 ''
 'So in our case we specify:'
 ''
 '```'
 'CommTools.YesOrNo_Answers←1 2⍴''Sure you want to delete this file?'' ''y'''
 '```         '
 ''
 'When the question is asked:'
 '                             '
 '```'
 'CommTools.YesOrNo ''Sure you want to delete this file?'''
 '```'
 ''
 '`YesOrNo` would do the following:'
 ''
 '1. Check whether there is a global variable `YesOrNo_Answers` around.'
 '2. If there is it would try to match the question to any row of the first column of `YesOrNo_Answers` '
 '3. If there is a match it would return the value in the second column of the identified row'
 ''
 'Notes:'
 ''
 '* Leading spaces in the question will be removed'
 '* If multiple entries in `YesOrNo_Answers` match the question an error is thrown'
 '* If the second column is empty `YesOrNo` would return the default answer which is defined by the'
 '  left argument: 1="Y", 0="N"'
 '  '
 '  If there is no left argument provided in such a case `YesOrNo` would throw an error'
 '* If no row in `YesOrNo_Answers` matches the question it would ask the question as usual'
 ''
 '#### Dynamic questions'
 '    '
 'Sometimes you need to ask dynamically created questions like "Sure you want to delete the file /foo/boo/this-will-change.txt"'
 ''
 'In this case just specify "Sure you want to delete the file" as the text to match: if there is no full match `YesOrNo` '
 'will start looking for questions that _begins_ with the given text, so it would still find a match. '
 ''
 '#### Multiple-line questions                    '
 ''
 '`YesNorNo` accepts nested vectors as questions as well as a character vector with `⎕UCS 10` in it. (Note that a nested vector'
 'is internally converted into a simple character vector with `⎕UCS 10` in it)'
 ''
 'If the two searches outlined above do not produce a match `YesNorNo` would isolate the last bit of the question '
 'and check it for a full match.'
 ''
 'This is best explained by an example:'
 ''
 '```'
 '     q←⊂''file1'''
 '     q,←⊂''file1'''
 '     q,←⊂''Sure you wanna delete these?'''
 '     CommTools.YesOrNo_Answers←1 2⍴ (3⊃q) ''y'''
 '     ⎕←CommTools.YesOrNo q'
 ('y'⋄)
 '```'
 ''
 '### The function "Select"'
 ''
 'Imagine you want to present a list with three items, and you want the second one to be selected.'
 ''
 'This can be achieved by creating a global variable `Select_Choices` as a matrix with two'
 'columns:'
 ''
 '| `[;1]` | Contains the caption of the list.'
 '| `[;2]` | The answer to be given, so usually either an integer pointing to the item selected,<<br>>or a vector of integers (in case "a" was entered) or `⍬` (in case "q" was entered).'
 ''
 '`Select` would do the following:'
 ''
 '1. Check whether there is a global variable `Select_Choices` around'
 '2. If so it would try to match the caption to any row in the first column of `Select_Choices` '
 '3. If there is a match it would return the value in the second column of the identified row'
 ''
 'Notes:'
 ''
 '* Leading spaces in choices are removed'
 '* If multiple entries in `Select_Choices` match the caption an error is thrown'
 '* If no row in `Select_Choices` matches the caption it would present the list for selection  '
 ''
 'So in our case we specify:'
 ''
 '```'
 '   l←⊂''First'''
 '   l,←⊂''Second'''
 '   l,←⊂''Third'''
 '   caption←''Please select hot item:'''
 '   CommTools.Select_Choices←1 2⍴caption 2'
 '   ⎕←caption CommTools.Select l  '
 ('2'⋄)
 '``` '
 ''
 'For all items:'
 ''
 '```   '
 '   CommTools.Select_Choices←1 2⍴caption ''a'''
 '   ⎕←caption CommTools.Select l  '
 '1 2 3'
 '``` '
 ''
 'For no items ("quit"):'
 ''
 '```   '
 '   CommTools.Select_Choices←1 2⍴caption ''q'''
 '   ⎕←⍬≡caption CommTools.Select l  '
 ('1'⋄)
 '``` '
 ''
 '#### Specifying a choice'
 '                       '
 'If you need a specific selection to be returned but don''t know the item number in advance because the list is created '
 'dynamically then you can specify the selection itself instead of an integer.'
 ''
 'For example:'
 ''
 '```'
 '   CommTools.Select_Choices←1 2⍴caption ''Second'''
 '   ⎕←caption CommTools.Select l'
 '2     '
 '```'
 ''
 '### The function "Pause"'
 ''
 'The purpose of this function is to print a message to `⎕SE`, possibly with linefeed characters (`⎕UCS 10`) in them, '
 'and tell the user that in order to continue she needs to press <enter>.'
 ''
 'As with the other functions you can interrupt `Pause` by entering `∘∘∘`.'
 ''
 'If you don''t want the function to pause, create a global variable `NoPause` and assign a 0 to it.'
 ''
 'If you want to pause in some but not all instances you can assign one or more `msg` to `NoPause`. '
 'The function will try to match the string(s) on `NoPause` with message, and if it''s a full or partial match it won''t pause, otherwise it will.'
 ''
 '### Asking for a number'
 ''
 'Imagine you are asking this question:'
 '                       '
 '```'
 '({1}CommTools.AskForNumber) ''Number of copies to print'''
 '```'
 ''
 'Note that the operator `AskForNumber` requires a check function to be passed as left operand. In the example '
 'the check function simply returns a 1. Instead you could perform a real check like this:'
 ''
 '```'
 'CheckFn←{'
 '   ⍵∊1 2 3 4 5:1 '
 '   ⎕←''Please enter a number between 1 and 5'' '
 '   0'
 ('}'⋄)
 '(CheckFn CommTools.AskForNumber) ''Number of copies to print:'''
 '```     '
 ''
 'If the user does not enter a number but just presses <enter> an empty vector is returned. You can force the user to enter'
 'a number by passing a 1 as left argument (`enforce`).'
 ''
 'To answer this question automatically create a global variable `AskForNumber_Answers` as a matrix'
 'with two columns:'
 ''
 '| `[;1]` | Contains the question.'
 '| `[;2]` | The answer to be given, either as a character vector or as a number.'
 ''
 'So in our case we specify:'
 ''
 '```'
 'CommTools.AskForNumber_Answers←1 2⍴''Number of copies to print'' 1'
 '```         '
 ''
 'When the question is asked:'
 '                             '
 '```'
 '({1}CommTools.AskForNumber) ''Number of copies to print'''
 '```'
 ''
 '`AskForNumber` would do the following:'
 ''
 '1. Check whether there is a global variable `AskForNumber_Answers` around'
 '2. If there is it would try to match the question to any row in the first column of `AskForNumber_Answers` '
 '3. If there is a match it would return the value in the second column of the identified row and convert it to a number'
 '   if it is text'
 ''
 'Notes:'
 ''
 '* Leading spaces in the question are removed, ": " is appended'
 '* If multiple entries in `AskForNumber_Answers` match the question an error is thrown'
 '* If no row in `AskForNumber_Answers` matches the question, the question is asked as usual'
 ''
 '### Asking for a character vector'
 ''
 'Imagine you are asking this question:'
 '                       '
 '```'
 '({1}CommTools.AskForText) ''Enter a month (three characters)'''
 '```'
 ''
 'Note that the operator `AskForText` requires a check function to be passed as left operand. In the example '
 'the check function simply returns a 1. Instead you could perform a real check like this:'
 ''
 '```'
 'CheckFn←{'
 '   (⊂⍵)∊↓12 3⍴''janfebmaraprmaijunjulaugsepoctnovdec'':1 '
 '   ⎕←''Please enter just three lowercase characters'' '
 '   0'
 ('}'⋄)
 '(CheckFn CommTools.AskForText) ''Enter a month (just three character)'''
 '```     '
 ''
 'If the user does not enter anything but just hits <enter> an empty vector will be returned. '
 'You can force the user to enter a number by passing a 1 as left argument (`enforce`).'
 ''
 'To answer this question automatically create a global variable `AskForText_Answers` as a matrix'
 'with two columns:'
 ''
 '| `[;1]` | Contains the question.'
 '| `[;2]` | The answer to be given.'
 ''
 'So in our case we specify:'
 ''
 '```'
 'CommTools.AskForText_Answers←1 2⍴''Enter a month (three character)'' ''mar'''
 '```         '
 ''
 'When the question is asked:'
 '                             '
 '```'
 '({1}CommTools.AskForText) ''Enter a month (three character)'''
 '```'
 ''
 '`AskForText` would do the following:'
 ''
 '1. Check whether there is a global variable `AskForText_Answers` around'
 '2. If so it would try to match the question to any row of the first column of `AskForText_Answers` '
 '3. If there is a match it would return the value in the second column of the identified row'
 ''
 'Notes:'
 ''
 '* Leading spaces in the question are removed, ": " is appended'
 '* If multiple entries in `AskForText_Answers` match the question an error is thrown'
 '* If no row in `AskForText_Answers` matches the question it would ask the question as usual'
)
